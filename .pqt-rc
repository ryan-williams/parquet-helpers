#!/usr/bin/env bash

defn() {
  # Like defining an alias, but it's an exported bash function (usable in subshells).
  name="$1"
  shift
  if [ $# -eq 0 ]; then
    echo "Usage: ${FUNCNAME[0]} <alias name> <aliased function> [args...]" >&2
    return 1
  fi
  unalias "$name" &>/dev/null || true
  eval "$name() { $@ \"\$@\"; }"
  export -f "$name"
}

defn p2j parquet2json
defn p2js parquet-2-json.sh schema
defn pqs parquet-2-json.sh schema
defn p2jn parquet-2-json.sh rowcount
defn pqn parquet-2-json.sh rowcount
defn p2jc parquet-2-json.sh cat
defn pqc parquet-2-json.sh cat
defn p2jcc parquet-2-json.sh cat -c
defn pqcc parquet-2-json.sh cat -c
defn p2jcl parquet-2-json.sh cat -l
defn pqcl parquet-2-json.sh cat -l
defn pql parquet-2-json.sh cat -l
defn p2jcl1 parquet-2-json.sh cat -l 1
defn pqcl1 parquet-2-json.sh cat -l 1
defn pq1 parquet-2-json.sh cat -l 1
defn pq2 parquet-2-json.sh cat -l 2
defn pq3 parquet-2-json.sh cat -l 3
defn pq5 parquet-2-json.sh cat -l 5
defn p2jcn parquet-2-json.sh cat -l
defn pqcn parquet-2-json.sh cat -l
defn p2jh parquet-2-json.sh cat -l 10
defn pqh parquet-2-json.sh cat -l 10
defn p2jhn parquet-2-json.sh cat -l
defn pqhn parquet-2-json.sh cat -l
defn pqo parquet2json cat -o

parquet2json_tail() {
  local n
  if [ $# -eq 0 ]; then
    n=10
  else
    n="$1"; shift
  fi
  parquet-2-json.sh cat -o -$n "$@"
}
export -f parquet2json_tail
defn pqtl parquet2json_tail

parquet2json_slice() {
  if [ $# -eq 0 ]; then
    echo "Usage: ${FUNCNAME[0]} <offset>[+<limit>] [path]" >&2
    echo "  Examples:" >&2
    echo "    ${FUNCNAME[0]} 10      file.parquet  # 10 rows starting at offset 10" >&2
    echo "    ${FUNCNAME[0]} 10+1    file.parquet  # Just row at offset 10" >&2
    echo "    ${FUNCNAME[0]} 5+3     file.parquet  # 3 rows starting at offset 5" >&2
    echo "    ${FUNCNAME[0]} 2e6+e6  file.parquet  # 1M rows starting at offset 2M" >&2
    echo "    ${FUNCNAME[0]} e6+e3   file.parquet  # 1K rows starting at offset 1M" >&2
    return 1
  fi
  local slice="$1"; shift
  if [[ "$slice" == *+* ]]; then
    IFS='+' read -r offset limit <<< "$slice"
  else
    offset="$slice"
    limit=10
  fi
  # Normalize scientific notation: "e6" -> "1e6"
  [[ "$offset" =~ ^e ]] && offset="1$offset"
  [[ "$limit" =~ ^e ]] && limit="1$limit"
  # Convert scientific notation to integers
  offset=$(python3 -c "print(int(float('$offset')))")
  limit=$(python3 -c "print(int(float('$limit')))")
  parquet-2-json.sh cat -o "$offset" -l "$limit" "$@"
}
export -f parquet2json_slice
defn pqsl parquet2json_slice

defn pqm parquet-metadata.py

parquet2json_jq() {
    if [ $# -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} [...args] <jq-filter>" >&2
        return 1
    fi
    local _query=("${@: -1}")
    local query="${_query[0]}"
    set -- "${@:1:$#-1}"
    parquet-2-json.sh cat "$@" | jq "$query"
}
export -f parquet2json_jq
defn p2jq parquet2json_jq
defn pqq parquet2json_jq

parquet2json_head_pretty() {
    parquet-2-json.sh cat -l "$@" | jq .
}
export -f parquet2json_head_pretty
defn p2jhp parquet2json_head_pretty
defn pqhp parquet2json_head_pretty
defn pq1p parquet2json_head_pretty 1
defn pq10 parquet2json_head_pretty 10

parquet2json_sort() {
    parquet-2-json.sh cat "$@" | sort
}
export -f parquet2json_sort
defn p2jt parquet2json_sort
defn pqt parquet2json_sort

parquet2json_col() {
  if [ $# -eq 0 ]; then
    echo "Usage: ${FUNCNAME[0]} <col> [args...]" >&2
    return 1
  fi
  parquet-2-json.sh cat -c "$@" | jq -r ".[\"$1\"]"
}
export -f parquet2json_col
defn pqk parquet2json_col

parquet2json_col_n() {
  if [ $# -lt 2 ]; then
    echo "Usage: ${FUNCNAME[0]} <col> <n> [args...]" >&2
    return 1
  fi
  local col="$1"; shift
  local n="$1"; shift
  parquet2json_col "$col" -l "$n" "$@"
}
export -f parquet2json_col_n
defn pqkl parquet2json_col_n
defn pqkn parquet2json_col_n

parquet_pretty_print_n() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} <n> [path]" >&2
        return 1
    fi
    n="$1"; shift
    if [ $# -eq 0 ]; then
        parquet2json <(cat) cat -l $n | jq .
    else
        parquet2json "$1" cat -l $n | jq .
    fi
}
export -f parquet_pretty_print_n
defn p2jcnq parquet_pretty_print_n

defn p2ja parquet2json-all
defn pqa parquet2json-all
defn pqa2 parquet2json-all -n 2
defn pqa3 parquet2json-all -n 3
defn pqa5 parquet2json-all -n 5
defn pqac parquet2json-all -s
defn pqan parquet2json-all -n
defn pqas parquet2json-all -s
