#!/usr/bin/env bash

set -eo pipefail

args=("$@")

err() {
  echo "$@" >&2
}
usage() {
  err "Usage: $(basename "$0") [-n <head_rows=10>] [-o <offset_args>] [-s] <path>"
  err '  -n: number of first and last rows to display; comma-separate to distinguish head/tail (e.g. default `-n3` is equivalent to `-n3,3`, which displays 3 rows from start and end). `,` prints all rows (useful in conjunction with an `-o` offset).'
  err "  -o: skip this number of rows; negative â‡’ skip to last N rows"
  err "  -s: compact mode (one object per line)"
  err
  err 'Opts passed via $PQT_TXT_OPTS will override those passed via CLI (to allow for configuring `git show`):'
  err
  err 'The "opts var" itself ("PQT_TXT_OPTS" by default) can also be customized, by setting `$PQT_TXT_OPTS_VAR`, e.g.:'
  err
  err '  export PQT_TXT_OPTS_VAR=PQT  # This can be done once, e.g. in your .bashrc'
  err '  PQT="-sn3" git show          # Shorter var name can then be used to configure diffs rendered by `git show` (in this case: compact output, 3 rows)'
  exit 127
}

head_rows=3
tail_rows=3
print_all=
offset_args=()
offset_rows=0
print_cmd="jq"
parse() {
  OPTIND=1
  while getopts "hn:o:s" opt; do
    case $opt in
      h) usage ;;
      n)
        n_rows="$OPTARG"
        if [ "$n_rows" = , ]; then
          head_rows=0
          tail_rows=0
          print_all=1
        elif [[ "$n_rows" == *,* ]]; then
          IFS=',' read -r head_rows tail_rows <<< "$n_rows"
        else
          head_rows="$n_rows"
          tail_rows="$n_rows"
        fi
        ;;
      o)
        offset_args=(-o"$OPTARG")
        offset_rows="$OPTARG"
        ;;
      s) print_cmd="cat" ;;
      *) usage ;;
    esac
  done
}

parse "$@"
shift $((OPTIND-1))

OPTS_VAR="${PQT_TXT_OPTS_VAR:-PQT_TXT_OPTS}"
OPTS="${!OPTS_VAR}"
if [ -n "$OPTS" ]; then
  IFS=' ' read -ra opts <<< "$OPTS"
  parse "${opts[@]}"
fi

if [ -z "$head_rows" ]; then
  head_rows=0
elif [ "$head_rows" -lt 0 ]; then
  if [ -n "$tail_rows" ]; then
    err "Can't specify both negative head and positive tail rows" >&2
    exit 1
  fi
  head_rows=0
  tail_rows=$((0 - head_rows))
fi
if [ -z "$tail_rows" ]; then
  tail_rows=0
fi

if [ $# -eq 0 ] || { [ $# -eq 1 ] && [ "$1" == "-" ]; }; then
  path="$(mktemp)"
  trap 'rm -f "$path"' EXIT
  cat > "$path"
elif [ $# -eq 1 ]; then
  path="$1"
  if ! [ -e "$path" ]; then
    echo "File not found: $path" >&2
    exit 127
  fi
else
  echo "Too many arguments: $#" >&2
  usage
fi

rowcount="$(parquet-2-json.sh rowcount "$path")"

echo "MD5: $(md5sum "$path" | cut -d' ' -f1)"
echo "$(stat -c %s "$path") bytes"
echo "$rowcount rows"
parquet-2-json.sh schema "$path"
show_rows="$((head_rows + tail_rows + offset_rows))"
if [ -n "$print_all" ] || [ "$show_rows" -ge "$rowcount" ]; then
    parquet-2-json.sh cat "${offset_args[@]}" "$path" | "$print_cmd"
else
  if [ "$head_rows" -gt 0 ]; then
    if [ "$head_rows" -eq 1 ]; then
      echo "First row:"
    else
      echo "First $head_rows rows:"
    fi
    parquet-2-json.sh cat -l "$head_rows" "${offset_args[@]}" "$path" | "$print_cmd"
  fi
  if [ "$tail_rows" -gt 0 ]; then
    if [ "$tail_rows" -eq 1 ]; then
      echo "Last row:"
    else
      echo "Last $tail_rows rows:"
    fi
    parquet-2-json.sh cat "-o-$tail_rows" "$path" | "$print_cmd"
  fi
fi
