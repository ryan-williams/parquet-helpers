#!/usr/bin/env bash

set -eo pipefail

args=("$@")

err() {
  echo "$@" >&2
}
usage() {
  err "Usage: $0 [-n <n_rows=10>] [-o <offset>] [-s] <path>"
  err "  -n: number of rows to display"
  err "  -o: offset (skip) rows; negative âŸ¹ last rows"
  err "  -s: compact mode (one object per line)"
  err
  err "Received (${#args[@]}): ${args[*]}"
  exit 127
}

n_rows=10
print_cmd="jq"
offset=()
while getopts "hn:o:s" opt; do
  case $opt in
    h) usage ;;
    n) n_rows="$OPTARG" ;;
    o) offset=(-o"$OPTARG") ;;
    s) print_cmd="cat" ;;
    *) usage ;;
  esac
done

# Shift off the parsed options
shift $((OPTIND-1))

if [ "$n_rows" -eq 0 ]; then
  rows=()
else
  rows=(-l "$n_rows")
fi

if [ $# -eq 0 ] || { [ $# -eq 1 ] && [ "$1" == "-" ]; }; then
  path="$(mktemp)"
  trap 'rm -f "$path"' EXIT
  cat > "$path"
elif [ $# -eq 1 ]; then
  path="$1"
  if ! [ -e "$path" ]; then
    echo "File not found: $path" >&2
    exit 127
  fi
else
  echo "Too many arguments: $#" >&2
  usage
fi

echo "MD5: $(md5sum "$path" | cut -d' ' -f1)"
echo "$(stat -c %s "$path") bytes"
echo "$(parquet-2-json.sh rowcount "$path") rows"
parquet-2-json.sh schema "$path"
parquet-2-json.sh cat "${rows[@]}" "${offset[@]}" "$path" | "$print_cmd"
